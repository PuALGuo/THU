fn (%input0: Tensor[(1, 3, 64, 64), float32], %conv0.weight: Tensor[(64, 3, 3, 3), float32], %conv0.bias: Tensor[(64), float32], %conv1.weight: Tensor[(64, 64, 3, 3), float32], %conv1.bias: Tensor[(64), float32], %conv2.weight: Tensor[(64, 64, 3, 3), float32], %conv2.bias: Tensor[(64), float32], %conv3.weight: Tensor[(64, 64, 3, 3), float32], %conv3.bias: Tensor[(64), float32], %conv4.weight: Tensor[(3, 64, 3, 3), float32], %conv4.bias: Tensor[(3), float32]) -> Tensor[(1, 3, 128, 128), float32] {
  %0 = image.resize(%input0, size=[128, 128], method="nearest_neighbor") /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %1 = nn.conv2d(%input0, %conv0.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %2 = nn.bias_add(%1, %conv0.bias) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %4 = nn.conv2d(%3, %conv1.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %5 = nn.bias_add(%4, %conv1.bias) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %6 = nn.relu(%5) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %7 = nn.conv2d(%6, %conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %8 = nn.bias_add(%7, %conv2.bias) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %9 = nn.relu(%8) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %10 = nn.conv2d(%9, %conv3.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %11 = nn.bias_add(%10, %conv3.bias) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %13 = image.resize(%12, size=[128, 128], method="nearest_neighbor") /* ty=Tensor[(1, 64, 128, 128), float32] */;
  %14 = nn.conv2d(%13, %conv4.weight, padding=[1, 1, 1, 1], channels=3, kernel_size=[3, 3]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %15 = nn.bias_add(%14, %conv4.bias) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %16 = nn.relu(%15) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  add(%0, %16) /* ty=Tensor[(1, 3, 128, 128), float32] */
}

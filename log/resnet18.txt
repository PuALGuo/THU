fn (%data: Tensor[(1, 3, 224, 224), float32], %resnetv10_conv0_weight: Tensor[(64, 3, 7, 7), float32], %resnetv10_batchnorm0_gamma: Tensor[(64), float32], %resnetv10_batchnorm0_beta: Tensor[(64), float32], %resnetv10_batchnorm0_running_mean: Tensor[(64), float32], %resnetv10_batchnorm0_running_var: Tensor[(64), float32], %resnetv10_stage1_conv0_weight: Tensor[(64, 64, 3, 3), float32], %resnetv10_stage1_batchnorm0_gamma: Tensor[(64), float32], %resnetv10_stage1_batchnorm0_beta: Tensor[(64), float32], %resnetv10_stage1_batchnorm0_running_mean: Tensor[(64), float32], %resnetv10_stage1_batchnorm0_running_var: Tensor[(64), float32], %resnetv10_stage1_conv1_weight: Tensor[(64, 64, 3, 3), float32], %resnetv10_stage1_batchnorm1_gamma: Tensor[(64), float32], %resnetv10_stage1_batchnorm1_beta: Tensor[(64), float32], %resnetv10_stage1_batchnorm1_running_mean: Tensor[(64), float32], %resnetv10_stage1_batchnorm1_running_var: Tensor[(64), float32], %resnetv10_stage1_conv2_weight: Tensor[(64, 64, 3, 3), float32], %resnetv10_stage1_batchnorm2_gamma: Tensor[(64), float32], %resnetv10_stage1_batchnorm2_beta: Tensor[(64), float32], %resnetv10_stage1_batchnorm2_running_mean: Tensor[(64), float32], %resnetv10_stage1_batchnorm2_running_var: Tensor[(64), float32], %resnetv10_stage1_conv3_weight: Tensor[(64, 64, 3, 3), float32], %resnetv10_stage1_batchnorm3_gamma: Tensor[(64), float32], %resnetv10_stage1_batchnorm3_beta: Tensor[(64), float32], %resnetv10_stage1_batchnorm3_running_mean: Tensor[(64), float32], %resnetv10_stage1_batchnorm3_running_var: Tensor[(64), float32], %resnetv10_stage2_conv2_weight: Tensor[(128, 64, 1, 1), float32], %resnetv10_stage2_batchnorm2_gamma: Tensor[(128), float32], %resnetv10_stage2_batchnorm2_beta: Tensor[(128), float32], %resnetv10_stage2_batchnorm2_running_mean: Tensor[(128), float32], %resnetv10_stage2_batchnorm2_running_var: Tensor[(128), float32], %resnetv10_stage2_conv0_weight: Tensor[(128, 64, 3, 3), float32], %resnetv10_stage2_batchnorm0_gamma: Tensor[(128), float32], %resnetv10_stage2_batchnorm0_beta: Tensor[(128), float32], %resnetv10_stage2_batchnorm0_running_mean: Tensor[(128), float32], %resnetv10_stage2_batchnorm0_running_var: Tensor[(128), float32], %resnetv10_stage2_conv1_weight: Tensor[(128, 128, 3, 3), float32], %resnetv10_stage2_batchnorm1_gamma: Tensor[(128), float32], %resnetv10_stage2_batchnorm1_beta: Tensor[(128), float32], %resnetv10_stage2_batchnorm1_running_mean: Tensor[(128), float32], %resnetv10_stage2_batchnorm1_running_var: Tensor[(128), float32], %resnetv10_stage2_conv3_weight: Tensor[(128, 128, 3, 3), float32], %resnetv10_stage2_batchnorm3_gamma: Tensor[(128), float32], %resnetv10_stage2_batchnorm3_beta: Tensor[(128), float32], %resnetv10_stage2_batchnorm3_running_mean: Tensor[(128), float32], %resnetv10_stage2_batchnorm3_running_var: Tensor[(128), float32], %resnetv10_stage2_conv4_weight: Tensor[(128, 128, 3, 3), float32], %resnetv10_stage2_batchnorm4_gamma: Tensor[(128), float32], %resnetv10_stage2_batchnorm4_beta: Tensor[(128), float32], %resnetv10_stage2_batchnorm4_running_mean: Tensor[(128), float32], %resnetv10_stage2_batchnorm4_running_var: Tensor[(128), float32], %resnetv10_stage3_conv2_weight: Tensor[(256, 128, 1, 1), float32], %resnetv10_stage3_batchnorm2_gamma: Tensor[(256), float32], %resnetv10_stage3_batchnorm2_beta: Tensor[(256), float32], %resnetv10_stage3_batchnorm2_running_mean: Tensor[(256), float32], %resnetv10_stage3_batchnorm2_running_var: Tensor[(256), float32], %resnetv10_stage3_conv0_weight: Tensor[(256, 128, 3, 3), float32], %resnetv10_stage3_batchnorm0_gamma: Tensor[(256), float32], %resnetv10_stage3_batchnorm0_beta: Tensor[(256), float32], %resnetv10_stage3_batchnorm0_running_mean: Tensor[(256), float32], %resnetv10_stage3_batchnorm0_running_var: Tensor[(256), float32], %resnetv10_stage3_conv1_weight: Tensor[(256, 256, 3, 3), float32], %resnetv10_stage3_batchnorm1_gamma: Tensor[(256), float32], %resnetv10_stage3_batchnorm1_beta: Tensor[(256), float32], %resnetv10_stage3_batchnorm1_running_mean: Tensor[(256), float32], %resnetv10_stage3_batchnorm1_running_var: Tensor[(256), float32], %resnetv10_stage3_conv3_weight: Tensor[(256, 256, 3, 3), float32], %resnetv10_stage3_batchnorm3_gamma: Tensor[(256), float32], %resnetv10_stage3_batchnorm3_beta: Tensor[(256), float32], %resnetv10_stage3_batchnorm3_running_mean: Tensor[(256), float32], %resnetv10_stage3_batchnorm3_running_var: Tensor[(256), float32], %resnetv10_stage3_conv4_weight: Tensor[(256, 256, 3, 3), float32], %resnetv10_stage3_batchnorm4_gamma: Tensor[(256), float32], %resnetv10_stage3_batchnorm4_beta: Tensor[(256), float32], %resnetv10_stage3_batchnorm4_running_mean: Tensor[(256), float32], %resnetv10_stage3_batchnorm4_running_var: Tensor[(256), float32], %resnetv10_stage4_conv2_weight: Tensor[(512, 256, 1, 1), float32], %resnetv10_stage4_batchnorm2_gamma: Tensor[(512), float32], %resnetv10_stage4_batchnorm2_beta: Tensor[(512), float32], %resnetv10_stage4_batchnorm2_running_mean: Tensor[(512), float32], %resnetv10_stage4_batchnorm2_running_var: Tensor[(512), float32], %resnetv10_stage4_conv0_weight: Tensor[(512, 256, 3, 3), float32], %resnetv10_stage4_batchnorm0_gamma: Tensor[(512), float32], %resnetv10_stage4_batchnorm0_beta: Tensor[(512), float32], %resnetv10_stage4_batchnorm0_running_mean: Tensor[(512), float32], %resnetv10_stage4_batchnorm0_running_var: Tensor[(512), float32], %resnetv10_stage4_conv1_weight: Tensor[(512, 512, 3, 3), float32], %resnetv10_stage4_batchnorm1_gamma: Tensor[(512), float32], %resnetv10_stage4_batchnorm1_beta: Tensor[(512), float32], %resnetv10_stage4_batchnorm1_running_mean: Tensor[(512), float32], %resnetv10_stage4_batchnorm1_running_var: Tensor[(512), float32], %resnetv10_stage4_conv3_weight: Tensor[(512, 512, 3, 3), float32], %resnetv10_stage4_batchnorm3_gamma: Tensor[(512), float32], %resnetv10_stage4_batchnorm3_beta: Tensor[(512), float32], %resnetv10_stage4_batchnorm3_running_mean: Tensor[(512), float32], %resnetv10_stage4_batchnorm3_running_var: Tensor[(512), float32], %resnetv10_stage4_conv4_weight: Tensor[(512, 512, 3, 3), float32], %resnetv10_stage4_batchnorm4_gamma: Tensor[(512), float32], %resnetv10_stage4_batchnorm4_beta: Tensor[(512), float32], %resnetv10_stage4_batchnorm4_running_mean: Tensor[(512), float32], %resnetv10_stage4_batchnorm4_running_var: Tensor[(512), float32], %resnetv10_dense0_weight: Tensor[(1000, 512), float32], %resnetv10_dense0_bias: Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] {
  %0 = nn.conv2d(%data, %resnetv10_conv0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %1 = nn.batch_norm(%0, %resnetv10_batchnorm0_gamma, %resnetv10_batchnorm0_beta, %resnetv10_batchnorm0_running_mean, %resnetv10_batchnorm0_running_var) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %2 = %1.0;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %4 = nn.max_pool2d(%3, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %5 = nn.conv2d(%4, %resnetv10_stage1_conv0_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %6 = nn.batch_norm(%5, %resnetv10_stage1_batchnorm0_gamma, %resnetv10_stage1_batchnorm0_beta, %resnetv10_stage1_batchnorm0_running_mean, %resnetv10_stage1_batchnorm0_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %7 = %6.0;
  %8 = nn.relu(%7) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %9 = nn.conv2d(%8, %resnetv10_stage1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %10 = nn.batch_norm(%9, %resnetv10_stage1_batchnorm1_gamma, %resnetv10_stage1_batchnorm1_beta, %resnetv10_stage1_batchnorm1_running_mean, %resnetv10_stage1_batchnorm1_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %11 = %10.0;
  %12 = add(%4, %11) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %14 = nn.conv2d(%13, %resnetv10_stage1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %15 = nn.batch_norm(%14, %resnetv10_stage1_batchnorm2_gamma, %resnetv10_stage1_batchnorm2_beta, %resnetv10_stage1_batchnorm2_running_mean, %resnetv10_stage1_batchnorm2_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %16 = %15.0;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %18 = nn.conv2d(%17, %resnetv10_stage1_conv3_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %19 = nn.batch_norm(%18, %resnetv10_stage1_batchnorm3_gamma, %resnetv10_stage1_batchnorm3_beta, %resnetv10_stage1_batchnorm3_running_mean, %resnetv10_stage1_batchnorm3_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %20 = %19.0;
  %21 = add(%13, %20) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %22 = nn.relu(%21) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %23 = nn.conv2d(%22, %resnetv10_stage2_conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %24 = nn.batch_norm(%23, %resnetv10_stage2_batchnorm2_gamma, %resnetv10_stage2_batchnorm2_beta, %resnetv10_stage2_batchnorm2_running_mean, %resnetv10_stage2_batchnorm2_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %25 = %24.0;
  %26 = nn.conv2d(%22, %resnetv10_stage2_conv0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %27 = nn.batch_norm(%26, %resnetv10_stage2_batchnorm0_gamma, %resnetv10_stage2_batchnorm0_beta, %resnetv10_stage2_batchnorm0_running_mean, %resnetv10_stage2_batchnorm0_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %28 = %27.0;
  %29 = nn.relu(%28) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %30 = nn.conv2d(%29, %resnetv10_stage2_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %31 = nn.batch_norm(%30, %resnetv10_stage2_batchnorm1_gamma, %resnetv10_stage2_batchnorm1_beta, %resnetv10_stage2_batchnorm1_running_mean, %resnetv10_stage2_batchnorm1_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %32 = %31.0;
  %33 = add(%25, %32) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %34 = nn.relu(%33) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %35 = nn.conv2d(%34, %resnetv10_stage2_conv3_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %36 = nn.batch_norm(%35, %resnetv10_stage2_batchnorm3_gamma, %resnetv10_stage2_batchnorm3_beta, %resnetv10_stage2_batchnorm3_running_mean, %resnetv10_stage2_batchnorm3_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %37 = %36.0;
  %38 = nn.relu(%37) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %39 = nn.conv2d(%38, %resnetv10_stage2_conv4_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %40 = nn.batch_norm(%39, %resnetv10_stage2_batchnorm4_gamma, %resnetv10_stage2_batchnorm4_beta, %resnetv10_stage2_batchnorm4_running_mean, %resnetv10_stage2_batchnorm4_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %41 = %40.0;
  %42 = add(%34, %41) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %43 = nn.relu(%42) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %44 = nn.conv2d(%43, %resnetv10_stage3_conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %45 = nn.batch_norm(%44, %resnetv10_stage3_batchnorm2_gamma, %resnetv10_stage3_batchnorm2_beta, %resnetv10_stage3_batchnorm2_running_mean, %resnetv10_stage3_batchnorm2_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %46 = %45.0;
  %47 = nn.conv2d(%43, %resnetv10_stage3_conv0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %48 = nn.batch_norm(%47, %resnetv10_stage3_batchnorm0_gamma, %resnetv10_stage3_batchnorm0_beta, %resnetv10_stage3_batchnorm0_running_mean, %resnetv10_stage3_batchnorm0_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %49 = %48.0;
  %50 = nn.relu(%49) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %51 = nn.conv2d(%50, %resnetv10_stage3_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %52 = nn.batch_norm(%51, %resnetv10_stage3_batchnorm1_gamma, %resnetv10_stage3_batchnorm1_beta, %resnetv10_stage3_batchnorm1_running_mean, %resnetv10_stage3_batchnorm1_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %53 = %52.0;
  %54 = add(%46, %53) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %55 = nn.relu(%54) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %56 = nn.conv2d(%55, %resnetv10_stage3_conv3_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %57 = nn.batch_norm(%56, %resnetv10_stage3_batchnorm3_gamma, %resnetv10_stage3_batchnorm3_beta, %resnetv10_stage3_batchnorm3_running_mean, %resnetv10_stage3_batchnorm3_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %58 = %57.0;
  %59 = nn.relu(%58) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %60 = nn.conv2d(%59, %resnetv10_stage3_conv4_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %61 = nn.batch_norm(%60, %resnetv10_stage3_batchnorm4_gamma, %resnetv10_stage3_batchnorm4_beta, %resnetv10_stage3_batchnorm4_running_mean, %resnetv10_stage3_batchnorm4_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %62 = %61.0;
  %63 = add(%55, %62) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %64 = nn.relu(%63) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %65 = nn.conv2d(%64, %resnetv10_stage4_conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %66 = nn.batch_norm(%65, %resnetv10_stage4_batchnorm2_gamma, %resnetv10_stage4_batchnorm2_beta, %resnetv10_stage4_batchnorm2_running_mean, %resnetv10_stage4_batchnorm2_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %67 = %66.0;
  %68 = nn.conv2d(%64, %resnetv10_stage4_conv0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %69 = nn.batch_norm(%68, %resnetv10_stage4_batchnorm0_gamma, %resnetv10_stage4_batchnorm0_beta, %resnetv10_stage4_batchnorm0_running_mean, %resnetv10_stage4_batchnorm0_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %70 = %69.0;
  %71 = nn.relu(%70) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %72 = nn.conv2d(%71, %resnetv10_stage4_conv1_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %73 = nn.batch_norm(%72, %resnetv10_stage4_batchnorm1_gamma, %resnetv10_stage4_batchnorm1_beta, %resnetv10_stage4_batchnorm1_running_mean, %resnetv10_stage4_batchnorm1_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %74 = %73.0;
  %75 = add(%67, %74) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %76 = nn.relu(%75) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %77 = nn.conv2d(%76, %resnetv10_stage4_conv3_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %78 = nn.batch_norm(%77, %resnetv10_stage4_batchnorm3_gamma, %resnetv10_stage4_batchnorm3_beta, %resnetv10_stage4_batchnorm3_running_mean, %resnetv10_stage4_batchnorm3_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %79 = %78.0;
  %80 = nn.relu(%79) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %81 = nn.conv2d(%80, %resnetv10_stage4_conv4_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %82 = nn.batch_norm(%81, %resnetv10_stage4_batchnorm4_gamma, %resnetv10_stage4_batchnorm4_beta, %resnetv10_stage4_batchnorm4_running_mean, %resnetv10_stage4_batchnorm4_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %83 = %82.0;
  %84 = add(%76, %83) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %85 = nn.relu(%84) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %86 = nn.global_avg_pool2d(%85) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %87 = nn.batch_flatten(%86) /* ty=Tensor[(1, 512), float32] */;
  %88 = nn.dense(%87, %resnetv10_dense0_weight, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  nn.bias_add(%88, %resnetv10_dense0_bias, axis=-1) /* ty=Tensor[(1, 1000), float32] */
}
